ir2@start
ir2 = shift(ir,1L)
is.altrep(ir2@start)
ir2@start
ir2 = shift(ir,1L)
class(ir2@start)
devtools::load_all(".")
debug(arith_operator)
A_compact = list(start = 1L, by = 1L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getDataptr = getPrt)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=TRUE)
setClass("compactSeq",contains = "altInteger")
setMethod("Arith", signature = signature("altInteger","numeric"),
function(e1,e2){
if(length(e2)==1&&is.integer(e2)){
altData=getAltData1(e1)
if(is.null(altData$ptr)){
e1=duplicateObject(e1,FALSE)
altData$start=altData$start+e2
setAltData1(e1,altData)
return(e1)
}
}
e1+e2
})
A_compact = new("compactSeq",A_vector)
ir = IRanges(A_vector,10L)
ir2 = shift(ir,1L)
B = A_vector+1L
debug(arith_operator)
B = A_vector+1L
B = A_vector+1L
A_vector
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=TRUE)
A_compact
A_compact = list(start = 1L, by = 1L, length = 10L)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=TRUE)
B = A_vector+1L
A_vector
B
getAltData1(A_vector)
B = A_vector+1L
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=F)
B = A_vector+1L
B
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
B = A_vector+1L
B
devtools::load_all(".")
A_compact = list(start = 1L, by = 1L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getDataptr = getPrt)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
B = A_vector+1L
setClass("compactSeq",contains = "altInteger")
setMethod("Arith", signature = signature("altInteger","numeric"),
function(e1,e2){
if(length(e2)==1&&is.integer(e2)){
altData=getAltData1(e1)
if(is.null(altData$ptr)){
e1=duplicateObject(e1,FALSE)
altData$start=altData$start+e2
setAltData1(e1,altData)
return(e1)
}
}
e1+e2
})
A_compact = new("compactSeq",A_vector)
ir = IRanges(A_vector,10L)
library(IRanges)
ir = IRanges(A_vector,10L)
is.altrep(ir@start)
ir2 = shift(ir,1L)
is.altrep(ir2@start)
cir2@start
ir2@start
class(ir2@start)
class(ir@start)
class(A_compact)
.Internal(inspect(ir@start))
.Internal(inspect(A_compact))
anyNA(A_compact)
getAltData1(A_vector)
A_compact = new("compactSeq",A_vector)
anyNA(A_compact)
names(A_compact)
dim(A_compact)
is.integer(A_compact)
ir = IRanges(A_vector,10L)
is.altrep(ir@start)
getAltData1(ir@start)
b=duplicateObject(A_compact,FALSE)
b
getAltData1(b)
getAltData1(A_compact)
class(b)
debug(IRanges)
ir = IRanges(A_vector,10L)
ans <- solveUserSEW0(start=start, end=end, width=width)
class(ans@start)
class(start)
ir = IRanges(A_compact,10L)
undebug(IRanges)
ir = IRanges(A_compact,10L)
is.altrep(ir@start)
ir@start
class(ir@start)
ir2 = shift(ir,1L)
is.altrep(ir2@start)
class(ir2@start)
getAltData1(ir@start)
ir2 = shift(ir,1L)
ir2 = shift(ir,1L)
debug(shift)
ir2 = shift(ir,1L)
?debug
debug("shift",signature = "IRanges")
debug(shift,signature = "IRanges")
ir2 = shift(ir,1L)
class(shift)
start(x)
start(x) + shift
a=start(x) + shift
class(a)
getAltData1(a)
getAltData1(x@start)
ir2 = shift(ir,1L)
validObject(x)
ir2 = shift(ir,1L)
debug(getPrt)
ir2 = shift(ir,1L)
getPrt<-function(x,writable){
stop()
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
setAltMethod(className = "compactSeq", getDataptr = getPrt)
ir2 = shift(ir,1L)
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
setAltMethod(className = "compactSeq", getDataptr = getPrt)
ir2 = shift(ir,1L)
superClass
as(object, superClass)
validityMethod(as(object, superClass))
getAltData1(as(object, superClass)@start)
as(ir,""IPosRanges"")
as(ir,"IPosRanges")
as(ir,"IRanges")
debug(as)
as(ir,"IPosRanges")
coerceFun
coerceMethods
ls(coerceMethods)
asMethod
as(ir,"IPosRanges")
undebug(as)
as(ir,"IPosRanges")
a=seq(1L,20L,2L)
is.altrep(a)
a
A_compact = list(start = 1L, by = 1L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getDataptr = getPrt)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=F)
A_vector
B = A_vector+1L
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
A_vector
B = A_vector+1L
B
getAltData1(A_vector)
getAltData1(B)
A_compact = list(start = 1L, by = 1L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getDataptr = getPrt)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
A_vector
B = A_vector+1L
getAltData1(A_vector)
devtools::load_all(".")
A_compact = list(start = 1L, by = 1L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getDataptr = getPrt)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
A_vector
B = A_vector+1L
getAltData1(A_vector)
setClass("compactSeq",contains = "altInteger")
setMethod("Arith", signature = signature("compactSeq","numeric"),
function(e1,e2){
if(length(e2)==1&&is.integer(e2)){
altData=getAltData1(e1)
if(is.null(altData$ptr)){
e1=duplicateObject(e1,FALSE)
altData$start=altData$start+e2
setAltData1(e1,altData)
return(e1)
}
}
e1+e2
})
A_compact = new("compactSeq",A_vector)
ir = IRanges(A_compact,10L)
library(IRanges)
A_compact
ir = IRanges(A_compact,10L)
as(ir,"IRanges")
gc()
devtools::load_all(".")
a=1:10
a+1L
is.altrep(a)
getAltData1(a)
getAltData2(a)
a=1:10
getAltData2(a)
devtools::load_all(".")
A_compact = list(start = 1L, by = 1L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
A_compact
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=F)
A_vector
A_vector+1L
is.altrep(1L:10L)
a=1L:10L
a+1L
is.altrep(a)
getAltData1(a)
getAltData2(a)
a=1L:10L
getAltData2(a)
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
setAltMethod(className = "compactSeq", getDataptr = getPrt)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=F)
A_vector
A_vector+1L
getAltData1(A_vector)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=F)
B = A_vector+1L
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
B = A_vector+1L
getAltData1(A_vector)
B
class(B)
setClass("compactSeq",contains = "altInteger")
setMethod("Arith", signature = signature("compactSeq","numeric"),
function(e1,e2){
if(length(e2)==1&&is.integer(e2)){
altData=getAltData1(e1)
if(is.null(altData$ptr)){
e1=duplicateObject(e1,FALSE)
altData$start=altData$start+e2
setAltData1(e1,altData)
return(e1)
}
}
e1+e2
})
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
A_compact = new("compactSeq",A_vector)
A_compact
class(A_compact)
C = A_compact+1L
getAltData1(A_compact)
getAltData1(C)
library(IRanges)
ir = IRanges(A_vector,10L)
ir
is.altrep(ir@start)
class(ir@start)
ir = IRanges(A_compact,10L)
is.altrep(ir@start)
class(ir@start)
ir2 = shift(ir,1L)
is.altrep(ir2@start)
getAltData1(ir2@start)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
A_compact = list(start = 1L, by = 1L, length = 10L)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
A_compact = new("compactSeq",A_vector)
ir = IRanges(A_compact,10L)
ir
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
A_compact = list(start = 1L, by = 1L, length = 10L)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
ir = IRanges(A_vector,10L)
ir
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class=T)
ir = IRanges(A_vector,10L)
i2=as(ir,"IPosRanges")
?groupGeneric
+1
+(-1)
-
1
-T
*1
^1
%%1
%/%1
/
/1
-NA
NA
-NULL
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
sillysum(as.numeric(1:10))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".",recompile = T)
devtools::load_all(".")
sillysum(as.numeric(1:10))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
sillysum(1:10)
sillysum(as.numeric(1:10))
sillysum(1L:10L)
sillysum(rep(T,10))
