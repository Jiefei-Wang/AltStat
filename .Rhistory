x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
#setAltMethod(className = "compactSeq", getDataptr = getPrt)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A_vector
A_vector+1
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
A_vector
A_vector+1
devtools::load_all(".")
names(islands)
a=1:10
names(a)
class(a)="a"
a+1:40
'+'
getMethod("+")
vector("list",5)
?vector
e1Attr=list(a=1,b=2)
e2Attr=list(a=10,d=2)
if(is.null(e1Attr)&&is.null(e2Attr))
return(result)
if(is.null(e1Attr))
e1Attr <- list()
if(is.null(e2Attr))
e2Attr <- list()
attrNames <- unique(c(names(e1Attr),names(e2Attr)))
attrNames
resAttr <- vector("list",length(attrNames))
resAttr
names(resAttr) <- attrNames
resAttr
resAttr[names(e1Attr)] <- e1Attr
resAttr
e2NewAttr <- attrNames[!attrNames%in%names(e1Attr)]
e2NewAttr
attrNames
resAttr[e2NewAttr] <- e1Attr[e2NewAttr]
resAttr
e2NewAttr
resAttr[e2NewAttr]
resAttr[e2NewAttr] <- e2Attr[e2NewAttr]
resAttr
e2Attr=list(a=1)
attrNames <- unique(c(names(e1Attr),names(e2Attr)))
resAttr <- vector("list",length(attrNames))
names(resAttr) <- attrNames
resAttr[names(e1Attr)] <- e1Attr
e2NewAttr <- attrNames[!attrNames%in%names(e1Attr)]
resAttr[e2NewAttr] <- e2Attr[e2NewAttr]
resAttr
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
A_compact = list(start = 1L, by = 0L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
#setAltMethod(className = "compactSeq", getDataptr = getPrt)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A_vector
A_vector+1
A_vector+1:20
typeof(1:10)
A_vector+1:20
type
devtools::load_all(".")
A_vector+1:20
A_vector+1:20
A_vector+1:20
A_vector+1:20
devtools::load_all(".")
A_vector+1:20
devtools::load_all(".")
A_vector+1:20
A_vector+1L:20L
A_vector+1L
devtools::load_all(".")
a=structure(c(NA, 1:3, -1:1/0),class=c("altDouble","altNumeric","altWrapper"))
range(a)
range(a, na.rm = TRUE)
range(a, finite = TRUE, na.rm=TRUE)
??Inf
?Inf
?Inf
?is.infinite
devtools::load_all(".")
a=structure(c(NA, 1:3, -1:1/0),class=c("altDouble","altNumeric","altWrapper"))
range(a)
range(a, na.rm = TRUE)
range(a, finite = TRUE, na.rm=TRUE)
range(a, finite = TRUE)
a
a=structure(as.integer(c(NA, 1:3, -1:1/0)),class=c("altInteger","altNumeric","altWrapper"))
range(a)
range(a, na.rm = TRUE)
a
a=structure(c(NA, 1L:3L, -1L:1L/0L),class=c("altInteger","altNumeric","altWrapper"))
a
typeof(a)
?NA
a=structure(c(1L:3L, -1L:1L/0L),class=c("altInteger","altNumeric","altWrapper"))
a
range(a)
range(a, na.rm = TRUE)
range(a, finite = TRUE)
range(a, finite = TRUE, na.rm=TRUE)
devtools::load_all(".")
range(a, finite = TRUE, na.rm=TRUE)
devtools::load_all(".")
A_compact = list(start = 1L, by = 0L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getPrt<-function(x,writable){
if(is.null(x$ptr)){
message("Creating data")
x$ptr = seq(from = x$start ,
to = x$start +x$by*(x$length-1L),
length.out = x$length)
setAltSelfData(x)
}
x$ptr
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#setAltMethod(className = "compactSeq", getDataptr = getPrt)
#Create altWrapper object
A_vector = makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A_vector
?range
?groupGeneric
devtools::load_all(".")
A_vector
#Create altWrapper object
A = makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A+1L
A==1L
#Create altWrapper object
A = makeAltrep(className = "compactSeq", x = A_compact, S4Class = F)
A+1L
A
A==1L
#Create altWrapper object
A = makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A
mode(A)
typeof(A)
A&rep(True, 10)
A&rep(true, 10)
A&rep(TREU, 10)
A&rep(TRUE, 10)
cumsum(A)
devtools::load_all(".")
cumsum(A)
devtools::load_all(".")
cumsum(A)
sqrt(A)
range(A)
A
#Create altWrapper object
A = makeAltrep(className = "compactSeq", x = A_compact, S4Class = F)
A
sqrt(A)
A+1L
A==1L
A&rep(TRUE, 10)
A & rep(FALSE, 10)
sqrt(A)
A & rep(FALSE, 10)
A+1L
A==1L
A & FALSE
cumsum(A)
range(A)
#Create altWrapper object
A = makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A
sqrt(A)
A & FALSE
A+1L
A==1L
cumsum(A)
range(A)
devtools::load_all()
devtools::load_all()
A_compact = list(start = 1L, by = 0L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A <- makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
#Create altWrapper object
A <- makeAltrep(className = "compactSeq", x = A_compact, S4Class = F)
A
sqrt(A)
A & FALSE
A+1L
A==1L
cumsum(A)
range(A)
#Create altWrapper object
A <- makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A
sqrt(A)
A & FALSE
A + 1L
A == 1L
cumsum(A)
?iocManager::install
?BiocManager::install
packageVersion("xptr")
devtools::load_all(".")
devtools::load_all(".")
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "groupGeneric", "double")
setAltMethod(className = "groupGeneric", getLength = lengthFunc)
setAltMethod(className = "groupGeneric", getElement = getElementFunc)
#Create altWrapper object
B <- newAltrep(className = "groupGeneric", x = A)
B_s3 <- newAltrep(className = "groupGeneric", x = A, S3Class = T)
B_s4 <- newAltrep(className = "groupGeneric", x = A, S4Class = T)
B_s3 == 1
?groupGeneric
devtools::document()
devtools::load_all(".")
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "groupGeneric", "double")
setAltMethod(className = "groupGeneric", getLength = lengthFunc)
setAltMethod(className = "groupGeneric", getElement = getElementFunc)
#Create altWrapper object
B <- newAltrep(className = "groupGeneric", x = A)
B_s3 <- newAltrep(className = "groupGeneric", x = A, S3Class = T)
B_s4 <- newAltrep(className = "groupGeneric", x = A, S4Class = T)
B_s3 == 1
B_s4 == 1
B_s3 == 1
B_s3 == 1
opsOperator("==", B_s3, 1)
as.logical(B_s3)
as(B_s3,"logical")
?coerce
devtools::load_all(".")
opsOperator("==", B_s3, 1)
devtools::load_all(".")
opsOperator("==", B_s3, 1)
genericDispatch(opsOperator, "==", e1 = B_s3, e2 = 1)
devtools::load_all(".")
genericDispatch(opsOperator, "==", e1 = B_s3, e2 = 1)
devtools::load_all(".")
B_s3 == 1
B_s4 == 1
B_s3[1]
expect_error(B == A[1])
expect_equivalent(B_s3 == A[1], A == A[1])
expect_equivalent(B_s4 == A[1], A == A[1])
B_s3 == A[1]
expect_error(sqrt(B))
sqrt(B)
sqrt(B_s3)
B
B_s3
abs(B)
cumsum(B)
expect_error(cumsum(B))
expect_equivalent(cumsum(B_s3), cumsum(A))
cumsum(B_s3)
expect_equivalent(as.numeric(cumsum(B_s3)), cumsum(A))
sqrt
max(B_s3)
abs(B)
abs(B_s3)
sign(B)
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
devtools::load_all()
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
B
B
sqrt(B)
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
devtools::load_all()
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
sqrt(B)
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
version
devtools::load_all(".")
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
sqrt(B)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
sqrt(B)
sqrt(A)
A
devtools::load_all(".")
sqrt(B)
devtools::load_all(".")
sqrt(B)
A
sqrt(B)
range(A)
A <- runif(100000000)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
system.time(range(A))
system.time(range(B))
?setAltMethod
A <- runif(10000000)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
getSubset<- function(x, i){
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
setAltMethod(className = "testClass", getSubset = getSubset)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
system.time(range(A))
system.time(range(B))
devtools::load_all()
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
version
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
sqrt(B)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
B
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
A <- NA
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
B
B + 1L
B - 1L
?nA
?NA
A <- NA_integer_
setAltClass(className = "testClass", "integer")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
B
B - 1L
B + 1L
B == NA_integer_
NA==NA
?is.na
