range(A)
#Create altWrapper object
A = makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A
sqrt(A)
A & FALSE
A+1L
A==1L
cumsum(A)
range(A)
devtools::load_all()
devtools::load_all()
A_compact = list(start = 1L, by = 0L, length = 10L)
#Define ALTREP APIs
lengthFunc <- function(x) {
return(x$length)
}
getElementFunc <- function(x, i) {
if(is.null(x$ptr)){
return(x$start + x$by * (i - 1))
}else{
x$ptr[i]
}
}
#Register ALTREP class and functions
setAltClass(className = "compactSeq", "integer")
setAltMethod(className = "compactSeq", getLength = lengthFunc)
setAltMethod(className = "compactSeq", getElement = getElementFunc)
#Create altWrapper object
A <- makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
#Create altWrapper object
A <- makeAltrep(className = "compactSeq", x = A_compact, S4Class = F)
A
sqrt(A)
A & FALSE
A+1L
A==1L
cumsum(A)
range(A)
#Create altWrapper object
A <- makeAltrep(className = "compactSeq", x = A_compact, S4Class = T)
A
sqrt(A)
A & FALSE
A + 1L
A == 1L
cumsum(A)
?iocManager::install
?BiocManager::install
packageVersion("xptr")
devtools::load_all(".")
devtools::load_all(".")
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "groupGeneric", "double")
setAltMethod(className = "groupGeneric", getLength = lengthFunc)
setAltMethod(className = "groupGeneric", getElement = getElementFunc)
#Create altWrapper object
B <- newAltrep(className = "groupGeneric", x = A)
B_s3 <- newAltrep(className = "groupGeneric", x = A, S3Class = T)
B_s4 <- newAltrep(className = "groupGeneric", x = A, S4Class = T)
B_s3 == 1
?groupGeneric
devtools::document()
devtools::load_all(".")
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "groupGeneric", "double")
setAltMethod(className = "groupGeneric", getLength = lengthFunc)
setAltMethod(className = "groupGeneric", getElement = getElementFunc)
#Create altWrapper object
B <- newAltrep(className = "groupGeneric", x = A)
B_s3 <- newAltrep(className = "groupGeneric", x = A, S3Class = T)
B_s4 <- newAltrep(className = "groupGeneric", x = A, S4Class = T)
B_s3 == 1
B_s4 == 1
B_s3 == 1
B_s3 == 1
opsOperator("==", B_s3, 1)
as.logical(B_s3)
as(B_s3,"logical")
?coerce
devtools::load_all(".")
opsOperator("==", B_s3, 1)
devtools::load_all(".")
opsOperator("==", B_s3, 1)
genericDispatch(opsOperator, "==", e1 = B_s3, e2 = 1)
devtools::load_all(".")
genericDispatch(opsOperator, "==", e1 = B_s3, e2 = 1)
devtools::load_all(".")
B_s3 == 1
B_s4 == 1
B_s3[1]
expect_error(B == A[1])
expect_equivalent(B_s3 == A[1], A == A[1])
expect_equivalent(B_s4 == A[1], A == A[1])
B_s3 == A[1]
expect_error(sqrt(B))
sqrt(B)
sqrt(B_s3)
B
B_s3
abs(B)
cumsum(B)
expect_error(cumsum(B))
expect_equivalent(cumsum(B_s3), cumsum(A))
cumsum(B_s3)
expect_equivalent(as.numeric(cumsum(B_s3)), cumsum(A))
sqrt
max(B_s3)
abs(B)
abs(B_s3)
sign(B)
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
devtools::load_all()
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
B
B
sqrt(B)
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
devtools::load_all()
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
sqrt(B)
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
version
devtools::load_all(".")
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
sqrt(B)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
sqrt(B)
sqrt(A)
A
devtools::load_all(".")
sqrt(B)
devtools::load_all(".")
sqrt(B)
A
sqrt(B)
range(A)
A <- runif(100000000)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
system.time(range(A))
system.time(range(B))
?setAltMethod
A <- runif(10000000)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
getSubset<- function(x, i){
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
setAltMethod(className = "testClass", getSubset = getSubset)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
system.time(range(A))
system.time(range(B))
devtools::load_all()
A <- runif(10)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = F)
version
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
sqrt(B)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
B
B
B & FALSE
B + 1L
B == 1L
cumsum(B)
range(B)
A <- NA
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
B
B + 1L
B - 1L
?nA
?NA
A <- NA_integer_
setAltClass(className = "testClass", "integer")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A, S4Class = T)
B
B - 1L
B + 1L
B == NA_integer_
NA==NA
?is.na
devtools::load_all(".")
devtools::document()
devtools::document()
(1:10)%in%c(2,4)
if(!0)message("a")
?sqrt
?cumsum
is.numeric(c(T,F))
cummax(c(-Inf,1))
cummax(c(-Inf,1,2,3,4))
cummax(c(NA,1,2,3,4))
a=c("abs", "sign", "sqrt", "ceiling", "floor", "trunc", "cummax", "cummin", "cumprod", "cumsum", "log", "log10", "log2", "log1p", "acos", "acosh", "asin", "asinh", "atan", "atanh", "exp", "expm1", "cos", "cosh", "cospi", "sin", "sinh", "sinpi", "tan", "tanh", "tanpi", "gamma", "lgamma", "digamma", "trigamma")
a
cat(paste0(paste0('if (CHAR_EQUAL(op, "',a,'"))\n return std::abs(x);'),collapse = "\n"))
sign(1)
sign(-1)
sign(0)
sign(-0)
typeof(sign(-0))
?digamma
?sinpi
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
mathOperator("cummax",c(4,3,6))
xor
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
install_github("kloke/hbrfit") install.packages('http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz')
install_github("kloke/hbrfit")
install.packages('http://www.stat.wmich.edu/mckean/Stat666/Pkgs/npsmReg2_0.1.1.tar.gz')
devtools::install_github("kloke/hbrfit")
devtools::load_all()
library(AltWrapper)
A <- c(1,2,3)
lengthFunc <- function(x) {
length(x)
}
getElementFunc <- function(x, i) {
x[i]
}
setAltClass(className = "testClass", "double")
setAltMethod(className = "testClass", getLength = lengthFunc)
setAltMethod(className = "testClass", getElement = getElementFunc)
B <- newAltrep(className = "testClass", x = A)
B
D <- newAltWrapper(B, S4Class = T)
devtools::load_all(".")
devtools::load_all(".")
A <- runif(10)
#Create altWrapper object
A_s3 <- newAltWrapper(A, S3Class = T)
A_s4 <- newAltWrapper(A, S4Class = T)
A_s4 + 1
A_s3 + 1
A_s3
devtools::load_all(".")
A_s3 + 1
A_s3 + 1
devtools::load_all(".")
A_s3 + 1
A_s3 + 1
A_s4 + 1
A_s3 - 1
A_s4 - 1
A <- runif(10)-0.5
#Create altWrapper object
A_s3 <- newAltWrapper(A, S3Class = T)
A_s4 <- newAltWrapper(A, S4Class = T)
expect_equivalent(as.numeric(A_s3 + 1), A + 1)
expect_equivalent(as.numeric(A_s4 + 1), A + 1)
expect_equivalent(as.numeric(A_s3 - 1), A - 1)
expect_equivalent(as.numeric(A_s4 - 1), A - 1)
expect_equivalent(A_s3 == A[1], A == A[1])
expect_equivalent(A_s4 == A[1], A == A[1])
A_s3 == A[1]
A_s4 == A[1]
expect_equivalent(A_s3 == A[1], A == A[1])
expect_equivalent(as.numeric(cumsum(A_s3)), cumsum(A))
cumsum(A_s3)
cumsum(A)
A_s3
devtools::load_all(".")
AltStat:::debug()
A <- runif(10)-0.5
#Create altWrapper object
A_s3 <- newAltWrapper(A, S3Class = T)
A_s4 <- newAltWrapper(A, S4Class = T)
cumsum(A_s3)
cumsum(A)
A
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
cumsum(A_s3)
cumsum(A)
devtools::load_all(".")
cumsum(A_s3)
A
devtools::load_all(".")
cumsum(A_s3)
cumsum(A)
expect_equivalent(as.numeric(cumsum(A_s3)), cumsum(A))
expect_equivalent(as.numeric(cumsum(A_s4)), cumsum(A))
as.numeric(cumsum(A_s3))
?groupGeneric
expect_equivalent(as.numeric(ceiling(A_s3)), ceiling(A))
expect_equivalent(as.numeric(ceiling(A_s4)), ceiling(A))
expect_equivalent(as.numeric(sign(A_s3)), sign(A))
expect_equivalent(as.numeric(sign(A_s4)), sign(A))
sign(A_s3)
sign(A)
devtools::load_all(".")
expect_equivalent(as.numeric(sign(A_s3)), sign(A))
expect_equivalent(as.numeric(sign(A_s4)), sign(A))
getwd()
devtools::load_all(".")
A <- runif(10)
altrep <- makeExampleAltrep(A)
altrep
getOption("max.print")
a=1:10
cat(a)
a
print(out)
devtools::load_all(".")
a=runif(1000)
a=runif(1000)
b=rep(0,600)
C_copy_altrep_value
C_copy_altrep_value(b,a)
b
all(b==a[1:600])
a=runif(10)-0.5
C_math_partial_operator("cumsum",a)
cumsum(a)
devtools::load_all(".")
C_math_partial_operator("cumsum",a)
a
altrep
b=makeExampleAltrep(a)
b
C_math_partial_operator("cumsum",b)
a
devtools::load_all(".")
1:600
print(1:600)
print
showMethods(print)
showMethods("print")
getMethod("print","integer")
print
a=as.numeric(1:600)
b=makeExampleAltrep(a)
devtools::load_all(".")
a=as.numeric(1:600)
b=makeExampleAltrep(a)
print(b)
b+1
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
C_test(1:20)
C_test(a)
a=as.numeric(1:20)
C_test(a)
b=makeExampleAltrep(a)
C_test(b)
.Internal(inspect(a))
a=c(1,2,3,4,5,6,7,8,9,10,11)
C_test(a)
b=makeExampleAltrep(a)
C_test(b)
C_test(1:11)
C_test(as.numeric(1:11))
C_test(a)
C_test(as.numeric(1:11))
devtools::load_all(".")
devtools::load_all(".")
C_test(c(1,2,3,4,5,6,7,8,9,10))
C_test(as.numeric(1:10))
devtools::load_all(".")
C_testPrint(as.numeric(1:10))
devtools::load_all(".")
C_testPrint(as.numeric(1:10))
C_testPrint(c(1,2,3,4,5,6,7,8,9,10))
devtools::load_all(".")
C_testPrint(as.numeric(1:10))
C_testPrint(c(1,2,3,4,5,6,7,8,9,10))
sessionInfo()
devtools::load_all(".")
devtools::load_all(".")
printAltWrapper(1:20)
printAltWrapper(1:2000)
printAltWrapper(1:2000)
printAltWrapper(1:2000)
length(x)
devtools::load_all(".")
printAltWrapper(1:2000)
version
